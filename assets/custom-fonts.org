#+STARTUP: content

* Custom fonts
  :PROPERTIES:
  :header-args: :results output
  :END:

  Orgro offers the following fonts:

  - [[https://github.com/tonsky/FiraCode][Fira Code]] (bundled with the app)
  - All monospace fonts offered for dynamic download by the [[https://pub.dev/packages/google_fonts][google_​fonts]] package
  - Additional fonts manually made available for dynamic download via the
    [[https://pub.dev/packages/dynamic_fonts][dynamic_​fonts]] package
    - [[https://pub.dev/packages/dynamic_fonts][FiraGO]]
    - [[https://rubjo.github.io/victor-mono/][Victor Mono]]
    - [[https://typeof.net/Iosevka/][Iosevka]]
    - [[https://files.ax86.net/terminus-ttf/][Terminus]]
    - [[https://github.com/microsoft/cascadia-code][Cascadia Code]]

  This file documents how the last category is prepared in literate-programming
  style.

** Font variants

   Org documents in general require four font variants:

   - regular
   - *bold*
   - /italic/
   - /not just bold or just italic, but *bold italic* (if you try hard enough)/

** FiraGO

   Download

   #+begin_src bash :dir ../..
     git clone --depth 1 https://github.com/bBoxType/FiraGO.git
   #+end_src

   Update

   #+begin_src bash :dir ../../FiraGO
     git pull
   #+end_src

   Checksum

   #+name: firago-csums
   #+begin_src bash :dir ../../FiraGO/Fonts :results table drawer replace
     for ttf in FiraGO_TTF_*/*/*.ttf; do
         echo $(basename $ttf) $(stat -f '%z' $ttf) $(openssl sha256 $ttf | cut -d '=' -f 2)
     done
   #+end_src

   #+RESULTS: firago-csums
   :results:
   | FiraGO-BoldItalic.ttf       | 813028 | 51ad0da400568385e038ccb962a692f145dfbd9071d7fe5cb0903fd2a8912ccd |
   | FiraGO-BookItalic.ttf       | 811792 | d1acf0bfba04de8a35888f402bbe029b3c412b2a52ea4da27bf498bc5973fc05 |
   | FiraGO-EightItalic.ttf      | 768336 | ef2d9f3c9caf711d9aab4839abf63d50e658db802555364f8bbec0fd594fb41a |
   | FiraGO-ExtraBoldItalic.ttf  | 812624 | fa332efd69db43a3dc3ea9cc9efbec938f5cb7d74331b653b5e5f5a0aab6f6cb |
   | FiraGO-ExtraLightItalic.ttf | 813732 | 17b25b0acc856d25a84066acb84de10adc0adc0057cfde52b45e453daec25825 |
   | FiraGO-FourItalic.ttf       | 765044 | e93d9f2e95f7ea40770583c41acaad4678ed90d5ef2cb0beeae073691805c8e4 |
   | FiraGO-HairItalic.ttf       | 778444 | 719d4c484d24961a1d34df543654e9483a59be136f11efbb9a94522c5feb7cf7 |
   | FiraGO-HeavyItalic.ttf      | 730912 | f7ee3438edc6d14046c0175eab3bc6edfccb72b7bda5f73e65509b5e1108573e |
   | FiraGO-Italic.ttf           | 813116 | 36713ecac376845daa58738d2c2ba797cf6f6477b8c5bb4fa79721dc970e8081 |
   | FiraGO-LightItalic.ttf      | 812940 | 0b686cb6edbb457ef3442f4c500a53bb964b96b939a7603949ee7ed812f5105d |
   | FiraGO-MediumItalic.ttf     | 813936 | 949698ddae3a568f1ada6eed12d5226d448b0b4a6600a44f096cfd9a1aabb555 |
   | FiraGO-SemiBoldItalic.ttf   | 813732 | 0dda9d907ec201586736814689a387a36fd05ebb87ac6faebdf4f8e4299d3020 |
   | FiraGO-ThinItalic.ttf       | 802064 | c3bb05f7ec7715a9f2e733e11b23e2a564ad0fafbdb81e097f0f006d5288850f |
   | FiraGO-TwoItalic.ttf        | 720640 | cebcd6f719b48196e0b23d70515ce9154f2c97edfaf954e2b6e97aa4b79420f1 |
   | FiraGO-UltraLightItalic.ttf | 814244 | 71b11d76754a0d43c412a8af5ce6a69c0c32c4d2e6d8a23e0e747cf4dc62cd10 |
   | FiraGO-Bold.ttf             | 807140 | ab720753c39073556260ebbaee7e7af89f9ca202a7c7abc257d935db590a1e35 |
   | FiraGO-Book.ttf             | 805308 | 4c132d5290477709da7fee51f2494d9d13157024e5011d665ebe73489416f894 |
   | FiraGO-Eight.ttf            | 757808 | ad5c1faab9d627aa69dcf3544530622d6c8281571e603d61879a5885b403b946 |
   | FiraGO-ExtraBold.ttf        | 805876 | 4cc3a0294144d7194e1ab9be8603690d2059b2b66b9106896e1b1bf0ac542347 |
   | FiraGO-ExtraLight.ttf       | 805744 | b1eca47daf25d0f975fedce2a7c18161d5b12f4ccef49bd15c9a55b6e65299d0 |
   | FiraGO-Four.ttf             | 754716 | 57bd7bad431f02d578e2edd7f2e8864aae5420bbe309ee782bd0ab5fafb69aeb |
   | FiraGO-Hair.ttf             | 768432 | 6516767cb6003138ab53f63c07f07d8c8236c3bb9214837dab056395d1e6349a |
   | FiraGO-Heavy.ttf            | 719748 | ac93a492bd88d0bca88bcacb8c169101c013013b9d92bb06d757717e6a5af8a5 |
   | FiraGO-Light.ttf            | 805292 | a8145c545e448cc3c51b1417422bc16ff84c5098907827dbfc13f8109ab3507b |
   | FiraGO-Medium.ttf           | 806400 | 5f753a48c7dff5b7af294e76624febb28c41071a5a65c0fd8a024ea9d1491e8a |
   | FiraGO-Regular.ttf          | 804888 | 495901c0c608ea265f4c31aa2a4c7a313e5cc2a3dd610da78a447fe8e07454a2 |
   | FiraGO-SemiBold.ttf         | 806684 | b47f1eaf02deaf16051a897f84f275326476306eb198f1cbceb5b1f5882021b1 |
   | FiraGO-Thin.ttf             | 793404 | a86be3f3ecf807e363347297bff4db79951394d7b024fe83b8ebb1cd2ddf1152 |
   | FiraGO-Two.ttf              | 708572 | f5691843d026b52c1d40505ebf04fdea67b0eb50ca945642dfa033abf70d5c3c |
   | FiraGO-UltraLight.ttf       | 804924 | a3f15783dc7b783e07518560992f038409eea500729cf2b2cfaef7cc17bd2cf7 |
   :end:

   #+call: update-checksums(replacements=firago-csums)

   Deploy to S3

   #+begin_src bash :dir ../../FiraGO :var dryrun="--dryrun"
     aws s3 $dryrun sync --no-progress --exclude '*' --include 'FiraGO_TTF_*' --acl public-read Fonts 's3://orgro/assets/fonts/'
   #+end_src

** Victor Mono

   Download

   #+begin_src bash :dir ../tmp :mkdirp t :var version="1.5.6"
     curl -LO https://github.com/rubjo/victor-mono/raw/v$version/public/VictorMonoAll.zip
     rm -rf VictorMono
     mkdir VictorMono
     unzip VictorMonoAll.zip -d VictorMono/$version
   #+end_src

   Checksum

   #+name: victormono-csums
   #+begin_src bash :dir ../tmp/VictorMono :results table drawer replace
     for ttf in */TTF/*.ttf; do
         echo $(basename $ttf) $(stat -f '%z' $ttf) $(openssl sha256 $ttf | cut -d '=' -f 2)
     done
   #+end_src

   #+RESULTS: victormono-csums
   :results:
   | VictorMono-Bold.ttf              | 207184 | 4efe29edefdf765d14e9ccdb045918911613f2a33e26949194fa77d52db2f5cc |
   | VictorMono-BoldItalic.ttf        | 256064 | b424d02260bd70bc858024f5e1f425dc6cf2fb1dba285bf9f74d727b1d83b5d9 |
   | VictorMono-BoldOblique.ttf       | 217448 | d96cb070414fff47caa6ed690a2253931e844391ea34234a8681c6fe2890a47c |
   | VictorMono-ExtraLight.ttf        | 199864 | eb52f62979ce223648ecdca7c972fa550b6d1853bb6a7f0ba8978f1ae0d30448 |
   | VictorMono-ExtraLightItalic.ttf  | 243620 | 5acaf2db51199a584e58ae4d66821698039554296732691893bc44e30be4298b |
   | VictorMono-ExtraLightOblique.ttf | 208884 | 4a04e8f2e3f8059c3c43c39a8665d2c5849c31d48d4e0de99475b29a774f1953 |
   | VictorMono-Italic.ttf            | 245568 | 39a2d5cbb5396b9f88878d482b442f24e4fbad59f09973ba9a91179d87a16b18 |
   | VictorMono-Light.ttf             | 201100 | b8f213331f5dd348f58f155daaa46b8b8436abfff5151f596f7cfe9a3bf5ece1 |
   | VictorMono-LightItalic.ttf       | 245656 | b3ac5d6ec38828eadf8d10962eb67f59e57b731ecd6e39a54d3f8c3fa4809953 |
   | VictorMono-LightOblique.ttf      | 209684 | 8eeb471ea67d7e5203cd154bb3de08f2d6bfd93ccee70edf8306101edad3921f |
   | VictorMono-Medium.ttf            | 203788 | 6507162dc5cc373c0e9cffc8a93ca406bf6d3dc981489d69c911bc2ec82c5f16 |
   | VictorMono-MediumItalic.ttf      | 252844 | 347b04414adc9b239ba88bf03732ed2e1d8c128d58ec62cf8c872cbb779c4494 |
   | VictorMono-MediumOblique.ttf     | 214040 | 550a076cfc0c9837408a85a6732fb9152846d8d12b3533267c3f7eaeb2866019 |
   | VictorMono-Oblique.ttf           | 210440 | 7c86c86ced27a038d50d76a39827b5ffa0480aa59ca7a106661d169c8f61d955 |
   | VictorMono-Regular.ttf           | 201740 | 1af31bba86bd438a7aa5cd072db4e8ec9c36d20e2ed3f34e664b6a2bf37b3633 |
   | VictorMono-SemiBold.ttf          | 204740 | 5336d0d93a5bd49f129175762c100c1184eb2f8855c4bd933a6e6b4bddc0144d |
   | VictorMono-SemiBoldItalic.ttf    | 251032 | b4603e8d23e662394959429d61882e969b42616da1754fce4f693b9fac569556 |
   | VictorMono-SemiBoldOblique.ttf   | 213084 | d578462b119d1b219aa0b6ba2836681ee9e3c57c42a3308e41943bdfb41d4f02 |
   | VictorMono-Thin.ttf              | 200532 | fefcaf760a9aa524150dc46e3524ee9d1821640faf8dbb8113d631c44214e72c |
   | VictorMono-ThinItalic.ttf        | 245252 | 98fb733caf30a949ecdb87d9b920d92d445225ce2b6c5fd22490f7a9db2f172c |
   | VictorMono-ThinOblique.ttf       | 209840 | 0b79a4fd8e23ddf4da308e09a3327b157d750e2919d33b4781d9d554464d2994 |
   :end:

   #+call: update-checksums(replacements=victormono-csums)

   Deploy to S3

   #+begin_src bash :dir ../tmp :var dryrun="--dryrun"
     aws s3 $dryrun sync --no-progress --exclude '*' --include 'VictorMono/*.ttf' --acl public-read . 's3://orgro/assets/fonts/'
   #+end_src

** Terminus

   Download

   #+begin_src bash :dir ../tmp :mkdirp t :var version="4.49.3"
     curl -LO https://files.ax86.net/terminus-ttf/files/$version/terminus-ttf-$version.zip
     rm -rf Terminus
     mkdir Terminus
     unzip terminus-ttf-$version.zip -d Terminus
   #+end_src

   Checksum

   #+name: terminus-csums
   #+begin_src bash :dir ../tmp/Terminus :results table drawer replace
     for ttf in */*.ttf; do
         echo $(basename $ttf) $(stat -f '%z' $ttf) $(openssl sha256 $ttf | cut -d '=' -f 2)
     done
   #+end_src

   #+RESULTS: terminus-csums
   :results:
   | TerminusTTF-4.49.3.ttf             | 500668 | f668ad7884635e112bcfa2ced6ccb9550128f643bf539cb049bd90bd8afbf4b3 |
   | TerminusTTF-Bold-4.49.3.ttf        | 500572 | 6be22b2f690c54a848da85cbbb2461843105214ef74f4a71ba139fbeecb25ef5 |
   | TerminusTTF-Bold-Italic-4.49.3.ttf | 546696 | 115392036be665973d8dae3038708ce173f14af6b1888bdf3817961c23535be6 |
   | TerminusTTF-Italic-4.49.3.ttf      | 525996 | 525ee0ced02939f1a0eedb7f56be5328d255aa49d96cd5bc48070b6d276585c2 |
   :end:

   #+call: update-checksums(replacements=terminus-csums)

   Deploy to S3

   #+begin_src bash :dir ../tmp :var dryrun="--dryrun"
     aws s3 $dryrun sync --no-progress --exclude '*' --include 'Terminus/*.ttf' --acl public-read . 's3://orgro/assets/fonts/'
   #+end_src

** Cascadia Code

   Download

   #+begin_src bash :dir ../tmp :mkdirp t :var version="2404.23"
     curl -LO https://github.com/microsoft/cascadia-code/releases/download/v$version/CascadiaCode-$version.zip
     rm -rf CascadiaCode
     mkdir CascadiaCode
     unzip CascadiaCode-$version.zip -d CascadiaCode/$version
   #+end_src

   Checksum

   #+name: cascadiacode-csums
   #+begin_src bash :dir ../tmp/CascadiaCode :results table drawer replace
     for ttf in */ttf/static/CascadiaCode-*.ttf; do
         echo $(basename $ttf) $(stat -f '%z' $ttf) $(openssl sha256 $ttf | cut -d '=' -f 2)
     done
   #+end_src

   #+RESULTS: cascadiacode-csums
   :results:
   | CascadiaCode-Bold.ttf             | 606984 | 7ab1792ff3173242b08f903bf4183155af47f87d91352d7bb4f9b8dd477e632d |
   | CascadiaCode-BoldItalic.ttf       | 458624 | f76f1376ceab64953019645bde803879a800f928c7aace8d14827555808b4dc1 |
   | CascadiaCode-ExtraLight.ttf       | 598044 | d2b0eaff776c8448ebf1fa360fb0a061071210ff57fbf6275a09f9d25f612e38 |
   | CascadiaCode-ExtraLightItalic.ttf | 449880 | 809c06030ed5895370c15229546e56708ec8a7b59edc9a54db81acddc62aa066 |
   | CascadiaCode-Italic.ttf           | 453188 | 006e3251e8047c14e21bca50ef7265e3501aedacc28a6c8a3690b9ce03dbd422 |
   | CascadiaCode-Light.ttf            | 599948 | 57286f45146cc5558e3f1d1ca47f87b34551fa955c685a2f4e49ac5615c20f27 |
   | CascadiaCode-LightItalic.ttf      | 456172 | 1dac8e4f7324cd4bd4dd4079114142455a190755a6f9a1da1c532863d81ae7cd |
   | CascadiaCode-Regular.ttf          | 600344 | 0ae311a93c046a346150b828f70075a2ef7d45f70f7d39708cc930c2a514255b |
   | CascadiaCode-SemiBold.ttf         | 603912 | 2a7bad7ce1fe18fe4da41424bab3c0348c1a0eb9e6d321deb939a26c41edb8ed |
   | CascadiaCode-SemiBoldItalic.ttf   | 454632 | 74b034a65a6ea0a6536f58ce078e5fa84d0bcc1d2fd151754dcc20bf94c15825 |
   | CascadiaCode-SemiLight.ttf        | 600664 | 02e61a4a0d839603a1f6a3d4e97021b8a5f5dfc725010318e00fe8c734f2dd1c |
   | CascadiaCode-SemiLightItalic.ttf  | 455104 | 18fd2dcff3e126d88463add1e24f6f0168ef1e3d0eeb3b9737a29aa142d7e30e |
   :end:

   #+call: update-checksums(replacements=cascadiacode-csums)

   Deploy to S3

   #+begin_src bash :dir ../tmp :var dryrun="--dryrun"
     aws s3 $dryrun sync --no-progress --exclude '*' --include 'CascadiaCode/*/ttf/static/CascadiaCode-*.ttf' --acl public-read . 's3://orgro/assets/fonts/'
   #+end_src

** Custom Iosevka

   Download

   #+begin_src bash :dir ../..
     git clone --depth 1 https://github.com/be5invis/Iosevka.git
   #+end_src

   System prerequisites: Install with MacPorts

   #+begin_src bash :dir /sudo::
     port install -N npm10 ttfautohint
   #+end_src

   Additional preparation and updating

   #+begin_src bash :dir ../../Iosevka
     set -e
     # Check out newest tag; see
     # https://stackoverflow.com/a/22857288/448068
     git fetch --tags
     tag=$(git describe --tags $(git rev-list --tags --max-count=1))
     git checkout $tag
     echo $tag
   #+end_src

   #+RESULTS:
   : v33.2.9

   Configuration: Tangle the following

   #+begin_src yaml :tangle ../../Iosevka/private-build-plans.toml
     ### See https://github.com/be5invis/Iosevka/blob/master/doc/custom-build.md for comprehensive
     ### documentation of the options in this file

     [buildPlans.IosevkaOrgro]      # <IosevkaCustom> is your plan name
     family = "Iosevka Orgro"        # Font menu family name
     # spacing = "normal"               # Optional; Values: `normal`, `term`, `fontconfig-mono`, or `fixed`
     # serifs = "sans"                  # Optional; Values: `sans` or `slab`
     # exportGlyphNames = false       # Set this to true for ligature support in Kitty (increased file size)

     # webfontFormats = ['ttf', 'woff2']

     ###################################################################################################
     # Configure variants

     # Optional; Whether to inherit a `ss##` variant
     # [buildPlans.IosevkaOrgro.variants]
     # inherits = "ss01"

     # Optional; Configure single character's variant
     [buildPlans.IosevkaOrgro.variants.design]
     # g = 'single-storey-serifless'
     asterisk = 'penta-low'

     # Optional; Configure single character's variant for Upright and Oblique; Overrides [design]
     # [buildPlans.IosevkaOrgro.variants.upright]
     # i = 'zshaped'
     # l = 'zshaped'

     # Optional; Configure single character's variant for Italic only; Overrides [design]
     # [buildPlans.IosevkaOrgro.variants.italic]
     # i = 'tailed-serifed'
     # l = 'tailed-serifed'

     # End variant section
     ###################################################################################################

     ###################################################################################################
     # Configure ligations

     # [buildPlans.IosevkaOrgro.ligations]
     # inherits = "default-calt"   # Optional; inherits an existing ligation set
     # disables = []               # Optional; disable specific ligation groups, overrides inherited ligation set
     # enables  = []               # Optional; enable specific ligation groups, overrides inherited ligation set

     # End ligation section
     ###################################################################################################


     ###################################################################################################
     # Override default building weights
     # When buildPlans.<plan name>.weights is absent, all weights would built and mapped to
     # default values.
     # IMPORTANT : Currently "menu" and "css" property only support numbers between 0 and 1000.
     #             and "shape" properly only supports number between 100 and 900 (inclusive).
     #             If you decide to use custom weights you have to define all the weights you
     #             plan to use otherwise they will not be built.
     [buildPlans.IosevkaOrgro.weights.Regular]
     shape = 400  # Weight for glyph shapes.
     menu  = 400  # Weight for the font's names.
     css   = 400  # Weight for webfont CSS.

     # [buildPlans.IosevkaOrgro.weights.Book]
     # shape = 450
     # menu  = 450  # Use 450 here to name the font's weight "Book"
     # css   = 450

     [buildPlans.IosevkaOrgro.weights.Bold]
     shape = 700
     menu  = 700
     css   = 700

     # End weight section
     ###################################################################################################

     ###################################################################################################
     # Override default building slope sets
     # When this section is absent, all slopes would be built.

     [buildPlans.IosevkaOrgro.slopes.Upright]
     angle = 0             # Angle in degrees. Valid range [0, 15]
     shape = "upright"     # Slope grade used for shape selection.  `upright` | `oblique` | `italic`
     menu  = "upright"     # Slope grade used for naming.           `upright` | `oblique` | `italic`
     css   = "normal"      # Slope grade used for webfont CSS.      `normal`  | `oblique` | `italic`

     # [buildPlans.IosevkaOrgro.slopes.Oblique]
     # angle = 9.4
     # shape = "oblique"
     # menu  = "oblique"
     # css   = "oblique"

     [buildPlans.IosevkaOrgro.slopes.Italic]
     angle = 9.4
     shape = "italic"
     menu  = "italic"
     css   = "italic"
     # End slope section
     ###################################################################################################

     ###################################################################################################
     # Override default building widths
     # When buildPlans.<plan name>.widths is absent, all widths would built and mapped to
     # default values.
     # IMPORTANT : Currently "shape" property only supports numbers between 434 and 664 (inclusive),
     #             while "menu" only supports integers between 1 and 9 (inclusive).
     #             The "shape" parameter specifies the unit width, measured in 1/1000 em. The glyphs'
     #             width are equal to, or a simple multiple of the unit width.
     #             If you decide to use custom widths you have to define all the widths you plan to use,
     #             otherwise they will not be built.

     [buildPlans.IosevkaOrgro.widths.Normal]
     shape = 500        # Unit Width, measured in 1/1000 em.
     menu  = 5          # Width grade for the font's names.
     css   = "normal"   # "font-stretch' property of webfont CSS.

     # [buildPlans.IosevkaOrgro.widths.Extended]
     # shape = 600
     # menu  = 7
     # css   = "expanded"

     # End width section
     ###################################################################################################

     ###################################################################################################
     # Character Exclusion
     # Specify character ranges in the section below to exclude certain characters from the font being
     # built. Remove this section when this feature is not needed.

     [buildPlans.IosevkaOrgro.excludeChars]
     # ranges = [[10003, 10008]]

     # Exclude Regional Indicators because they prevent fallback to platform emoji fonts
     ranges = [[127462, 127487]]

     # End character exclusion
     ###################################################################################################

     ###################################################################################################
     # Compatibility Ligatures
     # Certain applications like Emacs does not support proper programming liagtures provided by
     # OpenType, but can support ligatures provided by PUA codepoints. Therefore you can edit the
     # following section to build PUA characters that are generated from the OpenType ligatures.
     # Remove this section when compatibility ligatures are not needed.

     # [[buildPlans.IosevkaOrgro.compatibilityLigatures]]
     # unicode = 57600 # 0xE100
     # featureTag = 'calt'
     # sequence = '<*>'

     # End compatibility ligatures section
     ###################################################################################################

     ###################################################################################################
     # Metric overrides
     # Certain metrics like line height (leading) could be overridden in your build plan file.
     # Edit the values to change the metrics. Remove this section when overriding is not needed.

     # [buildPlans.IosevkaOrgro.metricOverride]
     # leading = 1250
     # winMetricAscenderPad = 0
     # winMetricDescenderPad = 0
     # powerlineScaleY = 1
     # powerlineScaleX = 1
     # powerlineShiftY = 0
     # powerlineShiftX = 0

     # End metric override section
     ###################################################################################################
   #+end_src

   Build

   #+begin_src bash :dir ../../Iosevka :async
     npm ci
     npm run clean
     npm run build -- ttf::IosevkaOrgro
   #+end_src

   Checksum

   #+name: iosevka-csums
   #+begin_src bash :dir ../../Iosevka/dist/IosevkaOrgro/TTF :results table replace
     for ttf in *.ttf; do
         echo $ttf $(stat -f '%z' $ttf) $(openssl sha256 $ttf | cut -d '=' -f 2)
     done
   #+end_src

   #+RESULTS: iosevka-csums
   | IosevkaOrgro-Bold.ttf       | 9029020 | 588d80c452e9f5dd7f7d60a4d379a7ace584bece3d530f420de251c3de16e65c |
   | IosevkaOrgro-BoldItalic.ttf | 9357884 | 5e409608ec1e6561517f0a463490caf7d004009a65705703aa390fb0c06964d5 |
   | IosevkaOrgro-Italic.ttf     | 9383852 | c14a47613758945ac1b861aa1dc10157e554c40ac5c25a08c9109bd9d1420e30 |
   | IosevkaOrgro-Regular.ttf    | 9045968 | de57b4c2c6351ce2d2223a21b1b300ee5ed86a86a86733989eabf68c937dd828 |

   #+call: update-checksums(replacements=iosevka-csums)

   Deploy to S3

   #+begin_src bash :dir ../../Iosevka :var dryrun="--dryrun"
     ver=$(git describe --tags)
     aws s3 $dryrun sync --no-progress --exclude '*' --include 'TTF/*' --acl public-read \
         dist/IosevkaOrgro "s3://orgro/assets/fonts/iosevka-orgro-$ver/"
   #+end_src

** Updating sizes and checksums

   #+name: old-csums
   #+begin_src bash :results output table
     git show HEAD:./custom-fonts.org | grep "^ *|.*|.*| *$" | tr -d '|'
   #+end_src

   #+name: update-checksums
   #+header: :var target="../lib/src/fonts.dart" needles=old-csums
   #+header: :var replacements=()
   #+begin_src ruby :results output
     File.open(target, 'r+') do |out|
       text = out.read
       replacements.each do |filename, size, csum|
         _, old_size, old_csum = needles.assoc(filename)
         next unless old_size && old_csum

         unless size == old_size
           puts "#{filename}: #{old_size} -> #{size}"
           text.gsub!(old_size.to_s) { |_| size.to_s }
         end
         unless csum == old_csum
           puts "#{filename}: #{old_csum} -> #{csum}"
           text.gsub!(old_csum) { |_| csum }
         end
       end

       out.rewind
       out.write(text)
       out.truncate(out.pos)
     end
   #+end_src
